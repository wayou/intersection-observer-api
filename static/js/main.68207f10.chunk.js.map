{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["loaderObserver","lazyLoadObserver","IMAGES_PAGED","Array","fill","options","rootMargin","threshold","page","App","useState","images","setImages","infiniteCallback","useCallback","_entries","_observer","console","info","prev","lazyLoadCallback","entries","observer","forEach","entry","isIntersecting","lazyImage","target","log","classList","remove","src","dataset","unobserve","useEffect","IntersectionObserver","document","querySelector","observe","imgs","querySelectorAll","img","className","map","image","index","key","data-src","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mOAOIA,EACAC,E,sDAHEC,G,MAAe,IAAIC,MADP,IACwBC,KAFxB,8BAMdC,EAAU,CACZC,WAAY,MACZC,UAAW,GAETC,EAAO,EA6EIC,EA3EH,WAAO,IAAD,EACYC,mBAAmBR,GAD/B,mBACTS,EADS,KACDC,EADC,KAGVC,EAAmBC,uBACvB,SAACC,EAAUC,GACTC,QAAQC,KAAR,yBAA+BV,IAC/BI,GAAU,SAAAO,GAAI,4BAAQA,GAAR,YAAiBjB,SAEjC,IAGIkB,EAAmBN,uBACvB,SAACO,EAASC,GACRD,EAAQE,SAAQ,SAAAC,GACd,GAAIA,EAAMC,eAAgB,CAExB,IAAMC,EAAYF,EAAMG,OACxBV,QAAQW,IAAI,gBAAiBF,GAC7BA,EAAUG,UAAUC,OAAO,SAC3BJ,EAAUK,IAAML,EAAUM,QAAQD,IAClCT,EAASW,UAAUT,EAAMG,cAI/B,IAuCF,OAnCAO,qBAAU,WACHlC,IACHA,EAAiB,IAAImC,qBAAqBtB,EAAkBR,IAE9D,IAAMsB,EAASS,SAASC,cAAc,UAItC,OAHIV,GACF3B,EAAesC,QAAQX,GAElB,WACDA,GACF3B,EAAeiC,UAAUN,MAG5B,CAACd,IAGJqB,qBAAU,WACHjC,IACHA,EAAmB,IAAIkC,qBAAqBf,EAAkBf,IAEhE,IAAMkC,EAAOH,SAASI,iBAAiB,aAMvC,OALID,GACFA,EAAKhB,SAAQ,SAAAkB,GACXxC,EAAiBqC,QAAQG,MAGtB,WACDF,GACFA,EAAKhB,SAAQ,SAAAkB,GACXxC,EAAiBgC,UAAUQ,SAIhC,CAACrB,EAAkBT,IAGpB,yBAAK+B,UAAU,OACb,yBAAKA,UAAU,gBACZ/B,EAAOgC,KAAI,SAACC,EAAOC,GAAR,OACV,yBAAKH,UAAU,QAAQI,IAAKD,EAAOE,WAAUH,EAAK,aAASC,SAG/D,uDCzEcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASlB,SAASmB,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.68207f10.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport \"./App.css\";\n\nconst IMAGE_API = \"https://picsum.photos/200\";\nconst PAGE_SIZE = 10;\nconst IMAGES_PAGED = new Array(PAGE_SIZE).fill(IMAGE_API);\n\nlet loaderObserver: IntersectionObserver;\nlet lazyLoadObserver: IntersectionObserver;\nlet options = {\n  rootMargin: \"0px\",\n  threshold: 0\n};\nlet page = 0;\n\nconst App = () => {\n  const [images, setImages] = useState<string[]>(IMAGES_PAGED);\n\n  const infiniteCallback = useCallback<IntersectionObserverCallback>(\n    (_entries, _observer) => {\n      console.info(`loading page ${++page}`);\n      setImages(prev => [...prev, ...IMAGES_PAGED]);\n    },\n    []\n  );\n\n  const lazyLoadCallback = useCallback<IntersectionObserverCallback>(\n    (entries, observer) => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          // stop observer and load the image\n          const lazyImage = entry.target as HTMLImageElement;\n          console.log(\"lazy loading \", lazyImage);\n          lazyImage.classList.remove(\"empty\");\n          lazyImage.src = lazyImage.dataset.src!;\n          observer.unobserve(entry.target);\n        }\n      });\n    },\n    []\n  );\n\n  //setup  infinite loading\n  useEffect(() => {\n    if (!loaderObserver) {\n      loaderObserver = new IntersectionObserver(infiniteCallback, options);\n    }\n    const target = document.querySelector(\"footer\");\n    if (target) {\n      loaderObserver.observe(target);\n    }\n    return () => {\n      if (target) {\n        loaderObserver.unobserve(target);\n      }\n    };\n  }, [infiniteCallback]);\n\n  // setup lazy loading\n  useEffect(() => {\n    if (!lazyLoadObserver) {\n      lazyLoadObserver = new IntersectionObserver(lazyLoadCallback, options);\n    }\n    const imgs = document.querySelectorAll(\"img.empty\");\n    if (imgs) {\n      imgs.forEach(img => {\n        lazyLoadObserver.observe(img);\n      });\n    }\n    return () => {\n      if (imgs) {\n        imgs.forEach(img => {\n          lazyLoadObserver.unobserve(img);\n        });\n      }\n    };\n  }, [lazyLoadCallback, images]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"content-wrap\">\n        {images.map((image, index) => (\n          <img className=\"empty\" key={index} data-src={image + `?f=${index}`} />\n        ))}\n      </div>\n      <footer>loading more ....</footer>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}